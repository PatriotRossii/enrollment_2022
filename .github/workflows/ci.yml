name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: docker://postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: analyzer
          POSTGRES_PASSWORD: root
          POSTGRES_DB: analyzer
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1

      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.1.13
          virtualenvs-in-project: false
          virtualenvs-path: ~/.virtualenvs

      - name: Cache poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.virtualenvs
          key: poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Test with pytest
        env:
          ANALYZER_PG_URL: postgresql://analyzer:root@postgres/analyzer
        with:
          args: wait-for-port postgres:5432 && poetry run pytest -vv
  publish:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v2

      - name: Make source distribution
        run: make sdist

      - name: Retrieve version
        run: |
          echo "::set-output-name=PROJECT_VERSION::$(poetry version -s)"
        id: version

      - name: Build and push docker image
        uses: docker/build-push-action@v1
        with:
          push: true
          target: final
          tags: ${{ steps.version.outputs.PROJECT_VERSION }}, latest
